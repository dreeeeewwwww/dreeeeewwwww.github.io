(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var each=require("@turf/meta").coordEach;module.exports=function(r){var e=[1/0,1/0,-(1/0),-(1/0)];return each(r,function(r){e[0]>r[0]&&(e[0]=r[0]),e[1]>r[1]&&(e[1]=r[1]),e[2]<r[0]&&(e[2]=r[0]),e[3]<r[1]&&(e[3]=r[1])}),e};
},{"@turf/meta":8}],2:[function(require,module,exports){
var bbox=require("@turf/bbox"),point=require("@turf/helpers").point;module.exports=function(r){var e=bbox(r),o=(e[0]+e[2])/2,t=(e[1]+e[3])/2;return point([o,t])};
},{"@turf/bbox":1,"@turf/helpers":5}],3:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord,helpers=require("@turf/helpers"),point=helpers.point,distanceToRadians=helpers.distanceToRadians;module.exports=function(a,t,s,n){var e=Math.PI/180,i=180/Math.PI,o=getCoord(a),h=e*o[0],r=e*o[1],M=e*s,d=distanceToRadians(t,n),c=Math.asin(Math.sin(r)*Math.cos(d)+Math.cos(r)*Math.sin(d)*Math.cos(M)),p=h+Math.atan2(Math.sin(M)*Math.sin(d)*Math.cos(r),Math.cos(d)-Math.sin(r)*Math.sin(c));return point([i*p,i*c])};

},{"@turf/helpers":5,"@turf/invariant":7}],4:[function(require,module,exports){
var getCoord=require("@turf/invariant").getCoord,radiansToDistance=require("@turf/helpers").radiansToDistance;module.exports=function(t,a,r){var o=Math.PI/180,e=getCoord(t),n=getCoord(a),s=o*(n[1]-e[1]),i=o*(n[0]-e[0]),h=o*e[1],M=o*n[1],d=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(i/2),2)*Math.cos(h)*Math.cos(M);return radiansToDistance(2*Math.atan2(Math.sqrt(d),Math.sqrt(1-d)),r)};

},{"@turf/helpers":5,"@turf/invariant":7}],5:[function(require,module,exports){
function feature(e,r){return{type:"Feature",properties:r||{},geometry:e}}module.exports.feature=feature,module.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return feature({type:"Point",coordinates:e.slice()},r)},module.exports.polygon=function(e,r){if(!e)throw new Error("No coordinates passed");for(var o=0;o<e.length;o++){var t=e[o];if(t.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<t[t.length-1].length;n++)if(t[t.length-1][n]!==t[0][n])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},r)},module.exports.lineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"LineString",coordinates:e},r)},module.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}},module.exports.multiLineString=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:e},r)},module.exports.multiPoint=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:e},r)},module.exports.multiPolygon=function(e,r){if(!e)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:e},r)},module.exports.geometryCollection=function(e,r){return feature({type:"GeometryCollection",geometries:e},r)};var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};module.exports.radiansToDistance=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e*o},module.exports.distanceToRadians=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o},module.exports.distanceToDegrees=function(e,r){var o=factors[r||"kilometers"];if(void 0===o)throw new Error("Invalid unit");return e/o*57.2958};

},{}],6:[function(require,module,exports){
function hexagon(e,r,s){for(var n=[],i=0;i<6;i++){var o=e[0]+r*cosines[i],t=e[1]+s*sines[i];n.push([o,t])}return n.push(n[0]),polygon([n])}function hexTriangles(e,r,s){for(var n=[],i=0;i<6;i++){var o=[];o.push(e),o.push([e[0]+r*cosines[i],e[1]+s*sines[i]]),o.push([e[0]+r*cosines[(i+1)%6],e[1]+s*sines[(i+1)%6]]),o.push(e),n.push(polygon([o]))}return n}for(var point=require("@turf/helpers").point,polygon=require("@turf/helpers").polygon,distance=require("@turf/distance"),featurecollection=require("@turf/helpers").featureCollection,cosines=[],sines=[],i=0;i<6;i++){var angle=2*Math.PI/6*i;cosines.push(Math.cos(angle)),sines.push(Math.sin(angle))}module.exports=function(e,r,s,n){var i=r/distance(point([e[0],e[1]]),point([e[2],e[1]]),s),o=i*(e[2]-e[0]),t=r/distance(point([e[0],e[1]]),point([e[0],e[3]]),s),a=t*(e[3]-e[1]),u=o/2,p=2*u,h=Math.sqrt(3)/2*a,l=e[2]-e[0],c=e[3]-e[1],f=.75*p,v=h,g=l/(p-u/2),M=Math.ceil(g);Math.round(g)===M&&M++;var d=(M*f-u/2-l)/2-u/2,q=Math.ceil(c/h),x=(c-q*h)/2,y=q*h-c>h/2;y&&(x-=h/4);for(var T=featurecollection([]),m=0;m<M;m++)for(var C=0;C<=q;C++){var I=m%2===1;if(!(0===C&&I||0===C&&y)){var P=m*f+e[0]-d,b=C*v+e[1]+x;I&&(b-=h/2),n?T.features.push.apply(T.features,hexTriangles([P,b],o/2,a/2)):T.features.push(hexagon([P,b],o/2,a/2))}}return T};

},{"@turf/distance":4,"@turf/helpers":5}],7:[function(require,module,exports){
function getCoord(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}function geojsonType(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function featureOf(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}module.exports.geojsonType=geojsonType,module.exports.collectionOf=collectionOf,module.exports.featureOf=featureOf,module.exports.getCoord=getCoord;

},{}],8:[function(require,module,exports){
function coordEach(e,o,t){var r,n,c,l,u,p,i,a,f,s,h=0,d="FeatureCollection"===e.type,y="Feature"===e.type,g=d?e.features.length:1;for(r=0;r<g;r++)for(f=d?e.features[r].geometry:y?e.geometry:e,s="GeometryCollection"===f.type,i=s?f.geometries.length:1,l=0;l<i;l++)if(p=s?f.geometries[l]:f,a=p.coordinates,h=!t||"Polygon"!==p.type&&"MultiPolygon"!==p.type?0:1,"Point"===p.type)o(a);else if("LineString"===p.type||"MultiPoint"===p.type)for(n=0;n<a.length;n++)o(a[n]);else if("Polygon"===p.type||"MultiLineString"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length-h;c++)o(a[n][c]);else if("MultiPolygon"===p.type)for(n=0;n<a.length;n++)for(c=0;c<a[n].length;c++)for(u=0;u<a[n][c].length-h;u++)o(a[n][c][u]);else{if("GeometryCollection"!==p.type)throw new Error("Unknown Geometry Type");for(n=0;n<p.geometries.length;n++)coordEach(p.geometries[n],o,t)}}function coordReduce(e,o,t,r){return coordEach(e,function(e){t=o(t,e)},r),t}function propEach(e,o){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length;t++)o(e.features[t].properties);break;case"Feature":o(e.properties)}}function propReduce(e,o,t){return propEach(e,function(e){t=o(t,e)}),t}function featureEach(e,o){if("Feature"===e.type)o(e);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length;t++)o(e.features[t])}function coordAll(e){var o=[];return coordEach(e,function(e){o.push(e)}),o}module.exports.coordEach=coordEach,module.exports.coordReduce=coordReduce,module.exports.propEach=propEach,module.exports.propReduce=propReduce,module.exports.featureEach=featureEach,module.exports.coordAll=coordAll;
},{}],9:[function(require,module,exports){
module.exports={center:require("@turf/center"),hexGrid:require("@turf/hex-grid"),destination:require("@turf/destination"),distance:require("@turf/distance")};
},{"@turf/center":2,"@turf/destination":3,"@turf/distance":4,"@turf/hex-grid":6}]},{},[9])(9)
});